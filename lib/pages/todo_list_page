import 'package:flutter/material.dart';
import 'package:todo_list/widgets/todo_list_item';
import 'package:todo_list/repositories/todo_repository';
import 'package:todo_list/models/todo';

//arquivo exclusivo p/ colocar o código da página da lista de tarefas
class TodoListPage extends StatefulWidget {
  const TodoListPage({Key? key}) : super(key: key); //construtor

  @override
  State<TodoListPage> createState() => _TodoListPageState();
}

class _TodoListPageState extends State<TodoListPage> {
  final TextEditingController todoController = TextEditingController(); //controlador p/ pegar o texto do campo de texto
  final TodoRepository todoRepository = TodoRepository();

  List<Todo> todos = []; //lista da classe Todo, cada Todo é o título de uma tarefa

  Todo? deletedTodo; //obj Todo
  int? deletedTodoPos; //armazana a posição

  String? errorText;

  @override
  void initState() { //método chamado sempre na criação do statefull
    super.initState();

    todoRepository.getTodoList().then((value) { //acessa o repositorio, pede a lista de todos, assim que retornar a lista de todos, vai armazenar a lista de todos 
      setState(() {
        todos = value;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min, //ocupa a menor altura possivel
            children: [
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: todoController,
                      decoration: InputDecoration(
                       border: OutlineInputBorder(),
                       labelText: 'Adicione uma tarefa',
                       hintText: 'Ex. Estudar Flutter',
                       errorText: errorText,
                       focusedBorder: OutlineInputBorder(
                        borderSide: BorderSide(
                          color: Color(0xff00d7f3),
                          width: 2,
                        )
                       ),
                       labelStyle: TextStyle(
                        color: Color(0xff00d7f3)
                       )
                      ), 
                    ),
                  ),
                  SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () {
                      String text = todoController.text; //le o texto do campo de texto
                      
                      if(text.isEmpty) {
                        setState(() {
                          errorText = 'O titulo não pode ser vazio!';
                        });
                        return; 
                      }

                      setState(() { //atualiza a tela
                        Todo newTodo = Todo( //cria o obj newTodo
                          title: text,
                          dateTime: DateTime.now(),
                        );
                        todos.add(newTodo); //add na lista
                        errorText = null;
                      });
                      todoController.clear(); //após add a tarefa ele limpa o campo de texto
                      todoRepository.saveTodoList(todos); //salva a lista de todos
                    },
                    style: ElevatedButton.styleFrom(
                      primary: Color(0xff00d7f3), //cor personalizada, inicia com 0xff seguido da cor desejada
                      padding: EdgeInsets.all(14),
                    ),
                    child: Icon(
                      Icons.add, //icone de adicionar (botão com um +)
                     size: 30,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 16),
              Flexible( //faz a lista ocupar o máximo de altura que ela pode ocupar
                child: ListView( //entra aqui depois de atualizar a tela no setState 
                  shrinkWrap: true,
                  children: [
                    for(Todo todo in todos) //passa por cada um dos obj
                      TodoListItem( //passa pro widget filho
                        todo: todo, //passa o obj por completo pra dentro do TodoListItem
                        onDelete: onDelete, //passa o obj de delete pra dentro do TodoListItem
                      ),
                  ],
                ),
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: Text(
                    'Você possui ${todos.length} tarefas pendentes', //pega o tamanho da lista e coloca dentro do texto
                    ),
                  ),
                  SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: showDeleteTodosConfirmationDialog, //mostra um diálogo de confirmação
                    style: ElevatedButton.styleFrom(
                      primary: Color(0xff00d7f3), //cor personalizada, inicia com 0xff seguido da cor desejada
                      padding: EdgeInsets.all(14),
                    ),
                    child: Text('Limpar tudo'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    ),
    );
  }

  void onDelete(Todo todo) { //função que deleta um todo
    //saber qual tarefa será removida e a posição dela na lista
    deletedTodo = todo; //salva o deletedTodo na variável
    deletedTodoPos = todos.indexOf(todo); //indice do elemento (posição na lista) 
    
    setState(() { //atualiza a página e
      todos.remove(todo); //remove o todo
    });
    todoRepository.saveTodoList(todos); //salva a lista de todos

    ScaffoldMessenger.of(context).clearSnackBars(); //remove o snackBar atual, remove qualquer snackBar que esteja sendo exibido e vai exibir o novo debaixo
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Tarefa ${todo.title} foi removida com sucesso!',
          style: TextStyle(color: Color(0xff060708)),),
        backgroundColor: Colors.white,
        action: SnackBarAction(
          label: 'Desfazer',
          textColor: const Color(0xff00d7f3),
          onPressed: () {
            setState((){
              todos.insert(deletedTodoPos!, deletedTodo!); //faz com que o item deletado volte p/ posição que estava
            });
            todoRepository.saveTodoList(todos); //salva a lista de todos
          },
        ),
        duration: const Duration(seconds: 5), //duração da snackBar
      ),
    );
  }

  void showDeleteTodosConfirmationDialog() {
    showDialog(
      context: context, 
      builder: (context) => AlertDialog(
        title: Text('Limpar tudo?'),
        content: Text('Você tem certeza que deseja apagar todas as tarefas?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); //fecha o diálogo
            },
            style: TextButton.styleFrom(primary: Color(0xff00d7f3)),
            child: Text('Cancelar'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); //fecha o diálogo
              deletedAllTodos(); //deleta toda a lista
            },
            style: TextButton.styleFrom(primary: Colors.red),
            child: Text('Limpar tudo'),
          ),
        ],
      ),
    );
  }

  void deletedAllTodos() { //função para deletar tudo
    setState(() { //atualiza a página e
      todos.clear(); //remove a lista
    }); 
    todoRepository.saveTodoList(todos); //salva a lista de todos
  }
}